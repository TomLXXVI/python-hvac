"""
Implementation of the Clear-Sky Model.
"""
from typing import Tuple, Dict, List, Any
import math
from datetime import datetime as DateTime
from datetime import date as Date
from datetime import time as Time
from hvac import Quantity
from .location import Location
from .solar_time import day_number


PI = math.pi
SOLAR_CST = 1367.0  # W / m ** 2
Q_ = Quantity


def get_E0(n: int) -> float:
    """
    Eccentricity correction factor.

    Parameters
    ----------
    n: int
        Number of the day in the year.
    """
    return 1.0 + 0.033 * math.cos(2.0 * PI * n / 365.25)


def get_I0_norm(n: int) -> float:
    """
    Extraterrestrial irradiance on a unit area of surface normal to the solar
    rays.

    Parameters
    ----------
    n: int
        Number of the day in the year.
    """
    return get_E0(n) * SOLAR_CST


def get_AM(theta_sun: Quantity) -> float:
    """
    Air mass ratio acc. to Kasten and Young (1989)

    Parameters
    ----------
    theta_sun: Quantity
        Zenith angle.
    """
    return 1.0 / (math.cos(theta_sun.to('rad').m) + 0.50572 * (96.07995 - theta_sun.to('deg').m) ** -1.6364)


class ClearSkyModel:

    def __init__(self, location: Location, tau_beam: float, tau_dif: float):
        """
        Parameters
        ----------
        location : Location
            The geographic location under consideration
        tau_beam : float
            Beam optical depth.
        tau_dif : float
            Diffuse optical depth.

        Values of `tau_beam` and `tau_dif` are location-specific parameters capturing prevalent clear-sky conditions
        on a monthly basis. Tables for numerous locations worldwide have been generated by Thevenard (2009).
        """
        self.location: Location = location
        self.tau_beam: float = tau_beam
        self.tau_dif: float = tau_dif
        self.ab: float = 1.454 - 0.406 * tau_beam - 0.268 * tau_dif + 0.021 * tau_beam * tau_dif
        self.ad: float = 0.507 + 0.205 * tau_beam - 0.080 * tau_dif - 0.190 * tau_beam * tau_dif

    def irradiance_components(self, datetime: DateTime) -> Tuple[Quantity, ...]:
        """
        Get the average hourly beam irradiance and diffuse irradiance on the
        horizontal surface.

        Parameters
        ----------
        datetime : DateTime
            Local (naive) time at which the irradiance components need to be
            calculated.

        Returns
        -------
        1. average hourly beam irradiance
        2. average hourly direct irradiance on the horizontal surface
        3. average hourly diffuse irradiance
        4. average hourly global irradiance on the horizontal surface

        """
        sunrise = self.location.sunrise(datetime.date())
        sunset = self.location.sunset(datetime.date())
        sp = self.location.sun_position(datetime)
        if sunrise.time() <= datetime.time() <= sunset.time():
            n = day_number(datetime.date())
            I0_norm = get_I0_norm(n)
            m = get_AM(sp.zenith)
            I_beam = I0_norm * math.exp(-self.tau_beam * m ** self.ab)
            I_dir_hor = I_beam * math.cos(sp.zenith.to('rad').m)
            I_dif = I0_norm * math.exp(-self.tau_dif * m ** self.ad)
            I_glo_hor = I_dir_hor + I_dif
            return (
                Q_(I_beam, 'W / m**2'),
                Q_(I_dir_hor, 'W / m ** 2'),
                Q_(I_dif, 'W / m**2'),
                Q_(I_glo_hor, 'W / m**2')
            )
        else:
            return Q_(0.0, 'W / m**2'), Q_(0.0, 'W / m**2'), Q_(0.0, 'W / m**2'), Q_(0.0, 'W / m**2')

    def get_daily_profile(self, date: Date) -> Dict[str, List[Any]]:
        """
        Returns the daily hourly profile of solar irradiance components on the
        horizontal surface at the given date.

        Parameters
        ----------
        date : Date
            The date at which the daily profile needs to be calculated.

        Returns
        -------
        A dictionary with:
        't': list of hour of the day as datetime object
        'beam': list of beam irradiance as Quantity object
        'dir_hor'
        'dif': list of diffuse irradiance as Quantity object
        'glo_hor': list of global irradiance as Quantity object
        """
        t_axis = [Time(h, 0, 0) for h in range(24)]
        t_axis.append(Time(23, 59, 59))
        t_axis = [DateTime.combine(date, t) for t in t_axis]
        I_beam_profile = []
        I_dir_hor_profile = []
        I_dif_profile = []
        I_glo_hor_profile = []
        for t in t_axis:
            I_beam, I_dir_hor, I_dif, I_glo_hor = self.irradiance_components(t)
            I_beam_profile.append(I_beam)
            I_dir_hor_profile.append(I_dir_hor)
            I_dif_profile.append(I_dif)
            I_glo_hor_profile.append(I_glo_hor)
        return {
            't': t_axis,
            'beam': [I_beam.to('W / m ** 2') for I_beam in I_beam_profile],
            'dir_hor': [I_dir_hor.to('W / m ** 2') for I_dir_hor in I_dir_hor_profile],
            'dif': [I_dif.to('W / m ** 2') for I_dif in I_dif_profile],
            'glo_hor': [I_glo_hor.to('W / m ** 2') for I_glo_hor in I_glo_hor_profile]
        }
